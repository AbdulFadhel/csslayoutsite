# Simplified Chinese

global.title: "学习CSS布局"
global.short_title: "CSS"
global.home: "主页"
global.toc: "目录"
global.next: "下一页"
global.previous: "前一页"
global.feedback: "意见 / 反馈"

util.extra_credit: "extra credit"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "主页"
util.nav.2: "Taco Menu"
util.nav.3: "Draft List"
util.nav.4: "Hours"
util.nav.5: "Directions"
util.nav.6: "Contact"

index.1: "本站教授的是现在广泛使用于网站布局领域的CSS基础。"
index.2: "我们假设你已经掌握了CSS选择器、属性和值。并且你可能已经对布局有一知半解，虽然对你来说写网页布局还是一件让你抓狂的事情。如果你想要从头开始学习HTML和CSS，那么你可以看下<a href=\"http://learn.shayhowe.com/html-css/\">这篇教程</a>。否则，让我们看看我们是否可以让你在下一个项目少动些怒。"
index.get_started: "开始"

no_layout.title: "没有布局"
no_layout.1: "如果你想要的只是一个大列内容，那么不用设置任何布局也是OK的。然而，如果用户把浏览器窗口调整的很大，这时阅读网页会非常不适：读完每一行之后，你的视觉焦点要从右到左移动一大段距离。你可以试试调整下浏览器窗口大小就知道意思了！"
no_layout.2: "在我们解决这个问题之前，我们需要清楚一个很重要的属性：<code>display</code>"

display.title: "\"display\"属性"
display.intro: "<code>display</code>是CSS中最重要的用于控制布局的属性。每个元素都有一个默认的display值，这与元素的类型有关。对于大多数元素它们的默认值通常是<code>block</code> 或<code>inline</code>。一个block元素通常被叫做块级元素。一个inline元素通常被叫做行内元素。"
display.block.title: "block"
display.block: "<code>div</code>是一个标准的块级元素。一个块级元素会新开始一行并且尽可能撑满。其他常用的块级元素包括<code>p</code> 和 <code>form</code>，和HTML5中的新元素：<code>header</code>，<code>footer</code>，<code>section</code>等等。"
display.inline.title: "inline"
display.inline.1: "<code>span</code>是一个标准的行内元素。一个行内元素可以在段落中包裹一些文字。"
display.inline.2: "例如"
display.inline.3: "没有打乱段落的布局。<code>a</code>元素是最常用的行内元素，它可以被用作链接。"
display.none.title: "none"
display.none.1: "另一个常用的display值是<code>none</code>。一些特殊的元素的默认display值是它，例如<code>script</code>。它通常被Javascript用来在不删除元素的情况下隐藏或显示元素。"
display.none.2: "它和<code>visibility</code>属性不一样。把<code>display</code>设置成<code>none</code>不会保留元素本该显示的空间，但是<code>visibility: hidden;</code>还会保留。"
display.other.title: "其他display值"
display.other: "还有很多的更有意思的display值，例如<code>list-item</code>和<code>table</code>。<a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">这里有一份详细的列表</a>。之后我们会讨论下<code>inline-block</code>和<code>flex</code>。"
display.extra: "就像我之前讨论过的，每个元素都有一个默认的display类型。不过你可以<em>随时随地</em>的重写它！虽然“人工制造”一个行内元素可能看起来很难以理解，不过你可以把有特定语义的元素改成行内元素。常见的例子是：把<code>li</code>元素修改成inline，制作成水平菜单。"

margin_auto.title: "margin: auto;"
margin_auto.1: "设置块级元素的<code>width</code>可以阻止它从左到右撑满容器。然后你就可以设置左右外边距为<code>auto</code>来使其水平居中。元素会占据你所指定的宽度，然后剩余的宽度会一分为二成为左右外边距。"
margin_auto.2: "唯一的问题是，当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面。让我们再来改进下这个方案..."

max_width.title: "max-width"
max_width.1: "在这种情况下使用<code>max-width</code>替代<code>width</code>可以使浏览器更好的处理小窗口的情况。这点在移动设备上显得尤为重要，调整下浏览器窗口大小检查下吧！"
max_width.2: "顺便提下，<code>max-width</code>被所有的<a href=\"http://caniuse.com/#search=max-width\">主要浏览器支持</a>包括IE7+，所以你可以大胆的使用它。"

box_model.title: "盒模型"
box_model.intro: "在我们讨论宽度的时候，我们应该讲下与它相关的一个重点知识：<em>盒模型</em>。当你设置了元素的宽度，元素有时候表现的比你设置的值还要更宽。元素的边框和内边距会撑开元素。看下面的例子，两个相同宽度的元素显示的实际宽度却不一样。"
box_model.simple: "我小一些..."
box_model.fancy: "我比它大！"
box_model.outro: "以前有一个代代相传的解决方案是数学。CSS开发者需要用比他们实际想要的宽度小一点的宽度，需要减去内边距和边框的宽度。值得庆幸地是你不需要再这么做了..."

box_sizing.title: "box-sizing"
box_sizing.1: "经过了一代又一代，人们意识到数学不好玩，所以一个新的CSS属性被创造出来，它叫做<code>box-sizing</code>。当你设置一个元素为<code>box-sizing: border-box;</code>时，此元素的内边距和边框不再会增加它的宽度。这里有一个与前一页相同的样例，唯一的区别是两个元素都设置了<code>box-sizing: border-box;</code>："
box_sizing.simple: "我们现在一样大小了！"
box_sizing.fancy: "万岁！"
box_sizing.2: "既然没有比这更好的方法，一些CSS开发者想要页面上所有的元素都有如此表现。所以开发者们把以下CSS代码放在他们页面上："
box_sizing.3: "这样可以确保所有的元素都会用这种更直观的方式排版。"
box_sizing.4: "既然<code>box-sizing</code>是个很新的属性，目前你还应该像我之前在样例中那样使用<code>-webkit-</code>和<code>-moz-</code>前缀。这可以启用特定浏览器实验中的特性。同时记住它是支持<a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>。"

position.title: "position"
position.intro: "为了制作更多复杂的布局，我们需要讨论下<code>position</code>属性。它有很多可能的值，并且它们的名字很难以理解与记住。让我们先一个个的过一遍，同时你可能需要把这页作为书签。"
position.static.title: "static"
position.static.1: "<code>static</code> is the default value. An element with <code>position: static;</code> is not positioned in any special way. A static element is said to be <em>not positioned</em> and an element with its position set to anything else is said to be <em>positioned</em>."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> behaves the same as <code>static</code> unless you add some extra properties."
position.relative.2: "Setting the <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element."
position.fixed.title: "fixed"
position.fixed.1: "A fixed element is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. As with <code>relative</code>, the <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> properties are used."
position.fixed.2: "I'm sure you've noticed that fixed element in the lower-right hand corner of the page. I'm giving you permission to pay attention to it now. Here is the CSS that puts it there:"
position.fixed.3: "A fixed element does not leave a gap in the page where it would normally have been located."
position.fixed.4: "Mobile browsers have surprisingly shaky support for fixed. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Learn more about the situation here</a>."
position.fixed.example: "Hello! Don't pay attention to me yet."
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> is the trickiest position value. <code>absolute</code> behaves like <code>fixed</code> except relative to <em>the nearest positioned ancestor</em> instead of relative to the viewport. If an absolutely-positioned element has no positioned ancestors, it uses the document body, and still moves along with page scrolling. Remember, a \"positioned\" element is one whose position is anything except <code>static</code>."
position.absolute.2: "Here is a simple example:"
position.absolute.relative: "This element is relatively-positioned. If this element was <code>position: static;</code> its absolutely-positioned child would escape and would be positioned relative to the document body."
position.absolute.absolute: "This element is absolutely-positioned. It's positioned relative to its parent."
position.absolute.3: "This stuff is tricky, but it's essential to creating great CSS layouts. On the next page we'll use <code>position</code> in a more practical example."

position_example.title: "position example"
position_example.1: "This position stuff might make a little more sense in a practical example. Below is a realistic page layout."
position_example.section.1: "The <code>margin-left</code> style for <code>section</code>s makes sure there is room for the <code>nav</code>."
position_example.section.2: "Notice what happens when you resize your browser. It works nicely!"
position_example.2: "This example works because the container is taller than the nav. If it wasn't, the nav would overflow outside of its container. In the coming pages we'll discuss other layout techniques that have different pros and cons."
position_example.footer: "If you use a fixed header or footer, make sure there is room for it! I put a <code>margin-bottom</code> on the <code>body</code>."

float.title: "float"
float.1: "Another CSS property used for layout is <code>float</code>. Float is intended for wrapping text around images, like this:"

clear.title: "clear"
clear.floating: "I feel like I'm floating!"
clear.1: "The <code>clear</code> property is important for controlling the behavior of floats. Compare these two examples:"
clear.2: "In this case, the <code>section</code> element is actually after the <code>div</code>. However, since the <code>div</code> is floated to the left, this is what happens: the text in the <code>section</code> is floated around the <code>div</code> and the <code>section</code> surrounds the whole thing. What if we wanted the <code>section</code> to actually appear after the floated element?"
clear.3: "Using <code>clear</code> we have now moved this section down below the floated <code>div</code>. You use the value <code>left</code> to clear elements floated to the left. You can also clear <code>right</code> and <code>both</code>."

clearfix.title: "the clearfix hack"
clearfix.1: "Here is a weird, bad thing that can sometimes happen when using floats:"
clearfix.2: "Uh oh... this image is taller than the element containing it, and it's floated, so it's overflowing outside of its container!"
clearfix.3: "Boo. There is a way to fix this, but it's ugly. It's called the <em>clearfix hack</em>."
clearfix.4: "Let's try adding this new CSS:"
clearfix.5: "Now let's see what happens:"
clearfix.6: "Much better!"
clearfix.7: "This works for modern browsers. If you want to support IE6 you will want to add the following:"
clearfix.8: "There are exotic browsers that may require extra attention. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">The world of clearfixing is pretty scary</a>, but this simple solution will work for the vast majority of browsers today."

float_layout.title: "float layout example"
float_layout.1: "It's very common to do entire layouts using <code>float</code>. Here is the same layout we did with <code>position</code> earlier, but using <code>float</code> instead."
float_layout.2: "This example works just like the last one. Notice we put a <code>clearfix</code> on the container. It's not needed in this example, but it would be if the <code>nav</code> was longer than the non-floated content."

percent.title: "percent width"
percent.1: "Percent is a measurement unit relative to the containing block. It's great for images: here we make an image that is always 50% the width of its container. Try shrinking down the page to see what happens!"
percent.2: "You could even use <code>min-width</code> and <code>max-width</code> to limit how big or small the image can get!"
percent.layout.title: "percent width layout"
percent.layout.1: "You can use percent for layout, but this can require more work. In this example, the <code>nav</code> content starts to wrap in a displeasing way when the window is too narrow. It comes down to what works for your content."
percent.layout.2: "When this layout is too narrow, the <code>nav</code> gets squished. Worse, you can't use <code>min-width</code> on the nav to fix it, because the right column wouldn't respect it."

media_queries.title: "media queries"
media_queries.1: "\"Responsive Design\" is the strategy of making a site that \"responds\" to the browser and device that it is being shown on... by looking awesome no matter what."
media_queries.2: "Media queries are the most powerful tool for doing this. Let's take our layout that uses percent widths and have it display in one column when the browser is too small to fit the menu in the sidebar:"
media_queries.3: "Now when you resize your browser it's even cooler than ever!"
media_queries.4: "Tada! Now our layout looks great even on mobile browsers. Here are <a href=\"http://mediaqueri.es/\">some popular sites that use media queries this way</a>. There is a whole lot more you can detect than <code>min-width</code> and <code>max-width</code>: check out <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">the MDN documentation</a> to learn more."
media_queries.5: "You can make your layout look even better on mobile using <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "You can create a grid of boxes that fills the browser width and wraps nicely. This has been possible for a long time using <code>float</code>, but now with <code>inline-block</code> it's even easier. Let's look at examples of both approaches."
inline_block.hard_way.title: "The Hard Way (using float)"
inline_block.hard_way.box: "I'm floating!"
inline_block.hard_way.after: "I'm using clear so I don't float next to the above boxes."
inline_block.easy_way.title: "The Easy Way (using inline-block)"
inline_block.easy_way.info: "You can achieve the same effect using the <code>inline-block</code> value of the <code>display</code> property."
inline_block.easy_way.box: "I'm an inline block!"
inline_block.easy_way.after: "I don't have to use <code>clear</code> in this case. Nice!"
inline_block.2: "You have to do extra work for <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6 and IE7 support</a> of <code>inline-block</code>. Sometimes people talk about <code>inline-block</code> triggering something called <code>hasLayout</code>, though you only need to know about that to support old browsers. Follow the previous link about IE6 and IE7 support if you're curious to learn more. Otherwise, let's continue."

inline_block_layout.title: "inline-block layout"
inline_block_layout.1: "You can also use <code>inline-block</code> for layouts. There are a few things to keep in mind:"
inline_block_layout.caveat.1: "<code>inline-block</code> elements are affected by the <code>vertical-align</code> property, which you probably want set to <code>top</code>."
inline_block_layout.caveat.2: "You need to set the width of each column"
inline_block_layout.caveat.3: "There will be a gap between the columns if there is any whitespace between them in the HTML"
inline_block_layout.tada: "Tada!"

column.title: "column"
column.1: "There is a new set of CSS properties that let you easily make multi-column text. Have a look:"
column.2: "CSS columns are very new, so you need to use the prefixes, and it won't work <a href=\"http://caniuse.com/#search=column\">through IE9 or in Opera Mini</a>. There are some more column-related properties, so <a href=\"http://www.quirksmode.org/css/multicolumn.html\">click here to read more</a>. Otherwise, off to the next topic."

flexbox.title: "flexbox"
flexbox.1: "The new <code>flexbox</code> layout mode is poised to redefine how we do layouts in CSS. Unfortunately the specification has changed a lot recently, so it's implemented differently in different browsers. Still, I'd like to share a couple examples so you know what's coming up. These examples currently only work in the Chrome flexbox implementation, based on the <a href=\"http://www.w3.org/TR/css3-flexbox/\">latest version of the standard</a>."
flexbox.2: "There are a lot of out-of-date flexbox resources around. If you want to learn more about flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">start here</a> to learn how to identify if a resource is current or not. I have written a <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">detailed article using the latest syntax</a>."
flexbox.3: "There is a lot more you can do with flexbox; these are just a few examples to give you an idea:"
flexbox.simple.title: "Simple Layout using Flexbox"
flexbox.simple.1: "Flexbox is so easy!"
flexbox.fancy.title: "Fancy Layout using Flexbox"
flexbox.fancy.1: "I will be 200px when there is room, and I will shrink down to 100px if there is not room, but no smaller."
flexbox.fancy.2: "I will always be 200px, no matter what."
flexbox.fancy.3: "I will fill up 1/3 of the remaining width."
flexbox.fancy.4: "I will fill up 2/3 of the remaining width."
flexbox.centering.title: "Centering using Flexbox"
flexbox.centering.1: "Finally, it's easy to vertically center something in CSS!"

frameworks.title: "css frameworks"
frameworks.1: "Because CSS layout is so tricky, there are CSS frameworks out there to help make it easier. Here are a few if you want to check them out. Using a framework is only good idea if the framework really does what you need your site to do. They're no replacement for knowing how CSS works."
frameworks.2: "That's it! If you have any feedback on this site, please <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">let me know on Twitter</a>!"

about.title: "about this site"
about.credits: "Written and built by <a href=\"http://incompl.com\">Greg Smith</a>. Design by <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. We work at <a href=\"http://bocoup.com\">Bocoup</a>."

